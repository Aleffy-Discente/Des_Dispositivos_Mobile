<resources>
    <string name="app_name">My Application</string>
    <string name="text_item_1">Home</string>
    <!-- TODO: Remove or change this placeholder text -->
    <string name="welcome">Bem-vindo ao App!</string>
    <string name="texto">Use o menu para navegar entre php e 123</string>
    <string name="texto_php">üìò No√ß√µes B√°sicas de PHP\n ‚Ä¢ Coment√°rios em PHP:\n - Uma linha: // ou #\n - V√°rias linhas: /* coment√°rio */\n \n ‚Ä¢ Vari√°veis:\n - Sempre come√ßam com o s√≠mbolo $. Exemplo:\n $nome = \'Maria\';\n \n ‚Ä¢ Concatena√ß√£o:\n - √â feita com o ponto (.). Exemplo:\n echo \'Ol√° \' . $nome;\n \n ‚Ä¢ Tipos de Dados:\n - String, Integer, Float, Boolean, Array, Object.\n \n ‚Ä¢ Estruturas de Controle:\n - if, else, elseif, switch, while, for, foreach.\n \n ‚Ä¢ Fun√ß√µes:\n - Criadas com a palavra-chave function.\n function soma($a, $b) {\n return $a + $b;\n }\n \n ‚Ä¢ Echo e Print:\n - Ambos exibem conte√∫do na tela.\n - echo √© ligeiramente mais r√°pido.\n \n ‚Ä¢ Inclus√£o de arquivos:\n - include \'arquivo.php\';\n - require \'arquivo.php\';\n - A diferen√ßa √© que require gera erro fatal se o arquivo n√£o for encontrado.\n \n üí° Dica: PHP √© interpretado no servidor, e o c√≥digo PHP n√£o √© vis√≠vel no navegador do usu√°rio.</string>
    <string name="texto_123">ü§ñ Conceitos Importantes do Android Moderno\n ‚Ä¢ ViewModel:\n - Classe que armazena e gerencia dados relacionados √† interface.\n - Mant√©m o estado mesmo ap√≥s rota√ß√µes de tela.\n \n ‚Ä¢ LiveData:\n - Tipo de dado observ√°vel usado para notificar a interface quando algo muda.\n \n ‚Ä¢ Coroutine:\n - Ferramenta do Kotlin para lidar com c√≥digo ass√≠ncrono de forma simples.\n - Usada em conjunto com ViewModel e Repository.\n \n ‚Ä¢ Repository Pattern:\n - Centraliza o acesso a dados (API, Banco de Dados, etc.).\n - Facilita a manuten√ß√£o e os testes.\n \n ‚Ä¢ RecyclerView:\n - Componente usado para listas din√¢micas.\n - Substitui o antigo ListView e √© altamente customiz√°vel.\n \n ‚Ä¢ Navigation Component:\n - Simplifica a navega√ß√£o entre telas (Fragments).\n - Usa o arquivo nav_graph.xml para mapear destinos.\n \n ‚Ä¢ Fragment:\n - Parte reutiliz√°vel da interface.\n - Pode ser trocada dinamicamente dentro de uma Activity.\n \n ‚Ä¢ Thread vs Coroutine:\n - Thread: execu√ß√£o paralela mais pesada.\n - Coroutine: leve, suspende e retoma tarefas sem bloquear a thread principal.\n \n ‚Ä¢ Data Binding e View Binding:\n - Acessam elementos de layout sem usar findViewById().\n - Data Binding permite ligar dados diretamente no XML.\n \n ‚Ä¢ Jetpack Compose (conceito moderno):\n - Framework declarativo para criar interfaces Android com Kotlin.\n - Substitui os arquivos XML tradicionais.\n \n üí° Dica: Sempre evite tarefas longas na Main Thread para n√£o travar a interface!</string>
    <string name="chatgpt">App topado</string>
    <string name="name">PHP</string>
    <!-- TODO: Remove or change this placeholder text -->
    <string name="hello_blank_fragment">Hello blank fragment</string>
</resources>